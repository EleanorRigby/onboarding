Install the Bosh v2 CLI
### What?
In this next section you are going to deploy Concourse locally in a single VM using `bosh create-env`, for which you'll need to install the Bosh v2 CLI.

### How?
Install the [Bosh v2 CLI](https://bosh.io/docs/cli-v2.html#install) with brew by running `brew install bosh-cli`. If you find yourself having trouble with the brew package manager, [these are the instructions to install manually](https://bosh.io/docs/cli-v2.html#install).

### Expected Result
Running `bosh -v` should print "version 2.0.33-...." or above.
L: concourse
---
Stand up Concourse locally
### What?
Concourse is a Pivotal-sponsored, pipeline-based, continuous integration and deployment (CI/CD) system. The "pipelines" are a collection of [three core concepts (jobs, tasks, and resources)](http://concourse.ci/concepts.html) that you'll learn more about in upcoming stories. While CI may call to mind test automation, Pivotal teams use it for so much more than that. Take a stroll around the office and check out the jobs up on the CI screens to get a general idea of how broadly we use it to automate all that is automate-able.

### How?
**[Follow these instructions](http://concourse.ci/concourse-lite.html)** to spin up a local Concourse VM with VirtualBox.

### Expected Result
![Lonely Concourse, no pipelines](http://engineering.pivotal.io/images/concourse-000/no_pipelines.png)

### Resources
[Docs: Concourse Architecture Overview](https://concourse.ci/architecture.html)
[Video: All About Concourse for Continuous Integration (video)](https://blog.pivotal.io/pivotal-perspectives/features/all-about-concourse-for-continuous-integration)
[Tool: YAML Validator](http://codebeautify.org/yaml-validator)
[Docs: CLI `create-env` Dependencies](https://bosh.io/docs/cli-env-deps.html)

### Relevant Repos and Teams
**Concourse:** [concourse/concourse](https://github.com/concourse/concourse)
L: concourse
---
Download and configure the Concourse CLI
### What?
Now that you have Concourse deployed, the first thing you'll want to do is download the `fly` CLI and authenticate with your target. This is done with the `fly login` command. The login command serves double duty: it authenticates with a given endpoint  and saves it under a more convenient name. The name and token are stored in ~/.flyrc (though you shouldn't really edit the file manually).

### How?
1. Download the `fly` CLI from the "no pipelines configured" page.
1. Make the program executable by running `chmod +x fly` on the file.
1. Move the executable to your computer's $PATH.

> The `$PATH` environment variable sets a selection of directories from which executable files can be run directly without requiring a full path (e.g. running `fly`, not `~/Downloads/fly`). If you `echo $PATH` you can see that variable. In all likelihood one of the directories is `/usr/local/bin/`. Unless you have another preference, move the `fly` executable to that directory.

To login to Concourse, run `fly -t NAME-OF-DEPLOYMENT login --username=CONCOURSE-USERNAME --password=CONCOURSE-PASSWORD --CONCOURSE-URL=https://CONCOURSE-DOMAIN -k`

### Expected Result
You've successfully entered your credentials and the CLI prints "target saved."

Run `fly login --help` to learn about other commands.

### Resources
[Fly login documentation](https://concourse.ci/fly-login.html)
[Cheatsheet: how Unix file permissions work](https://danflood.com/tech-stuff/chmod-cheat-sheet/)

### Relevant Repos and Teams
[concourse/fly](https://github.com/concourse/fly)
L: concourse
---
Create a pipeline with a single job
### What?
Every great Concourse behemoth of the 21st century started in the same place as yours is about to: with an empty `pipeline.yml`. You can kick it off with as little as a single, manually-triggered job.

### How?
1. Set up a `jobs:` section.
1. Define a **[job](https://concourse.ci/concepts.html#jobs)** with a name and a [plan](http://concourse.ci/build-plans.html).
1. Give the job a task that you define inline, in the pipeline itself (this is good to know how to do to test new configurations quickly).
1. "fly" your pipeline using the `fly` CLI.

### Expected Result
A job that always goes green. How idyllic.

### Resources
[Configuring a Job](http://concourse.ci/configuring-jobs.html)
[Build Plans](http://concourse.ci/build-plans.html)
[Pipeline Mechanics](http://concourse.ci/pipeline-mechanics.html)
L: concourse
---
Add a Git resource to the pipeline
### What?
A  **[resource](http://concourse.ci/concepts.html#resources)** is any entity that can be checked for new versions, pulled down at a specific version, and/or pushed up to idempotently create new versions. A few of the usual suspects are [listed here](http://concourse.ci/resource-types.html). They include a number of ideas that you're used to thinking of in terms of versioning (`git resource`, `git-release resource`, `tracker resource`, etc.), but also a few that you might not be, like `time`.

The [`git resource`](https://github.com/concourse/git-resource) tracks the commits in a git repository and, though I have no numbers on this, I expect it's the most commonly used Concourse resource. And you can have one of your very own!

### How?
Create a repo to house your Concourse code (`pipeline.yml` etc.) and set up a [git resource](https://github.com/concourse/git-resource) that fetches it. It will be useful to have access to this once we add tasks and a Dockerfile that you'll want to reference in your pipeline. Move your inline task to a yaml file and either a Bash or Ruby script in that repo.

### Expected Result
A one job, one resource pipeline that is always green.

### Resources
[Pipeline Mechanics](http://concourse.ci/pipeline-mechanics.html)
[Common Concourse "resources"](http://concourse.ci/concepts.html#resources)
L: concourse
---
Add a docker-image resource to the pipeline
### What?
Another popular Concourse resource is the **[`docker-image` resource](https://github.com/concourse/docker-image-resource)**. It's useful for providing a reproducible environment for your tests and builds with all of the dependencies a growing pipeline needs to succeed.

### How?
1. Write a simple Dockerfile.
1. Upload it to the DockerHub registry (if you do not have an account, create one at this point).
1. Set up the `docker-image` resource to fetch it.
1. Build the image and use it to do something cool.

### Resources
[Docker-image resource repo](https://github.com/concourse/docker-image-resource)
[Get Started with Docker](https://docs.docker.com/get-started/)
- [ ] Create DockerFile
L: concourse
---
[RELEASE] Spin up and configure Concourse-in-a-box â‡§
L: concourse
