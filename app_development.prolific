Prepare a Spring app for CF deployment
### What?
In the next story we're going to deploy the [Spring Music](https://github.com/cloudfoundry-samples/spring-music) app, but first we need to assemble the jar.

### How?
1. Clone the **[Spring Music](https://github.com/cloudfoundry-samples/spring-music)** repo to your local workstation.
1. `cd ./spring-music`
1. Assemble the jar by running `./gradlew assemble` (if your workstation doesn't have the JDK, looks like that's part of this step too).
1. Create a `/share/workspace/spring-music` directory path on your bosh-bastion VM.
1. [Copy the repo](https://cloud.google.com/compute/docs/instances/transfer-files) from your local `spring-music` directory to your bosh-bastion VM.
```
gcloud compute copy-files . bosh-bastion:/share/workspace/spring-music
```
### Expected Result
The spring-music repo with your assembled `spring-music.jar` should be in the `workspace` directory of your bosh-bastion VM.

### Resources
[Spring by Pivotal](https://spring.io/)
[Gcloud Compute Tips](https://cloud.google.com/compute/docs/gcloud-compute/tips)
L: app-dev, cloud foundry, gcp
---
Push a Spring app
### What?
Cloud Foundry applications are deployed by `cf push`-ing your code or some compiled artifact. When you push an app, you can optionally include an [application manifest.yml](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html) that contains properties about your application's deployment.

The appropriate [buildpack](https://docs.cloudfoundry.org/buildpacks/) will be selected for you by detect scripts and a 'droplet' will be produced that contains all your application dependencies. This droplet will be uploaded to the cells that run your application instances.

### How?
1. Navigate to the `./spring-music` directory you created in the last story.
1. In the `manifest.yml`, delete the line `random-route: true`
1. Set the disk quota to 1024M
1. Set the number of instances to 2
1. `cf push` your app

### Expected Result
`cf app spring-music` will print the app's status, including the URL. Visiting the URL in the browser should show you a list of albums.

### Resources
[Cf Buildpacks](https://docs.cloudfoundry.org/buildpacks/)
[CF application manifests](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html)
L: app-dev, cloud foundry, iaas-agnostic
---
Get recent Spring app logs
### What?

Cloud Foundry applications are expected to log to [stdout and stderr](https://en.wikipedia.org/wiki/Standard_streams). This is part of [The Twelve-Factor](https://12factor.net/logs) app design.

[Loggregator](https://github.com/cloudfoundry/loggregator), a Cloud Foundry component, provides a stream of log output from your app and from system components that interact with your app during updates and execution. Logs are gathered and stored in a best-effort manner. If a client is unable to consume log lines quickly enough, logs will be lost. The `--recent` flag will print the logs that are being buffered.

The log output has a [specific format](https://docs.cloudfoundry.org/devguide/deploy-apps/streaming-logs.html). It's important to note that when your application logs, the instance number is prepended to the message (i.e. [APP/*instance_number*]).

System components logs will also appear in relation to your application. Below is a description of a few important ones:
- The stager `STG` is responsible for creating the droplet using a Buildpack. 
- The Diego cell `CELL` is responsible for running your application instance. 
- The Router `RTR` logs your application has responded to an HTTP request.
- [See more components](https://docs.cloudfoundry.org/devguide/deploy-apps/streaming-logs.html#format)

### How?
`cf logs spring-music --recent`

### Expected Result
The output will look something like:
```
20116-12-05T21:37:29.96-0500 [STG/0]     OUT Uploaded build artifacts cache (109B)
2016-12-05T21:37:33.77-0500 [STG/0]      OUT Uploaded droplet (75.7M)
2016-12-05T21:37:33.78-0500 [STG/0]      OUT Uploading complete
2016-12-05T21:37:34.11-0500 [CELL/0]     OUT Creating container
2016-12-05T21:37:35.07-0500 [CELL/0]     OUT Successfully created container
2016-12-05T21:37:39.40-0500 [CELL/0]     OUT Starting health monitoring of container
2016-12-05T21:37:41.95-0500 [APP/0]      OUT  :: Spring Boot ::        (v1.3.5.RELEASE)
2016-12-05T21:37:42.08-0500 [APP/0]      OUT 2016-12-06 02:37:42.078  INFO 14 --- [           main] pertySourceApplicationContextInitializer : Adding 'cloud' PropertySource to ApplicationContext
2016-12-05T21:45:25.23-0500 [RTR/0]      OUT spring-music.pcfdev.io - "GET /favicon.ico HTTP/1.1" 200 0 946 "http://spring-music.local.pcfdev.io/service" ....
```

### Resources
[Logs for CF components](https://docs.cloudfoundry.org/running/managing-cf/logging.html)
[Logs for applications](https://docs.cloudfoundry.org/devguide/deploy-apps/streaming-logs.html)
L: app-dev, cloud foundry
---
Get streaming logs
### What?
By omitting the `--recent` Loggregator will stream logs from the application.

### How?
`cf logs spring-music`

### Things to see
1. Observe stack traces being logged when visiting the endpoint `/errors/throw`
1.  Observe the stack trace of your app exiting by visiting the endpoint `/errors/kill`
1. Run `watch cf app spring-music` to see it resurrect

### Did I just see my app just restart?
CloudFoundry applications are monitored with a constant health check that ensure they are listening on a specific port. When your application stops listening it'll be automatically restarted. 

You can see this in the logs tagged with `CELL` and `API`

When your application is down, in the `RTR` logs, you will see that HTTP requests will return a 502 Bad Gateway.
L: app-dev, cloud foundry
---
View a list of app events
### What?
Cloud Foundry stores a history of events about your application. This varies from an application being created to it crashing.

### How?
1. `cf stop spring-music`
1. `cf start spring-music`
1. `cf events spring-music`

### Expected Result
You should see the list of events including the recent stop & start.

### Resources
[StackOverflow: When to use cf events?](http://stackoverflow.com/questions/24545838/when-to-use-cf-events)
L: app-dev, cloud foundry
---
View your app's environment variables
### What?
Environment variables are the means by which the Cloud Foundry runtime communicates with a deployed application about its environment. You can use them too!

### How?
1. `cf set-env spring-music MYVAR hello`
1. `cf env spring-music`

### Expected Result
The CLI will show the application's environment variables classified as System-Provided (i.e. `VCAP_APPLICATION`) and User Provided (`MYVAR`). Running and Stage variables are provided by operators that apply to all applications.

### Resources
[Cloud Foundry Environment Variables](https://docs.run.pivotal.io/devguide/deploy-apps/environment-variable.html)
[VCAP_APPLICATION](https://docs.run.pivotal.io/devguide/deploy-apps/environment-variable.html#VCAP-APPLICATION)
[VCAP_SERVICES](https://docs.run.pivotal.io/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES)
L: app-dev, cloud foundry
---
SSH into a running app container
### What?
Your applications run on Diego Cells, which create containers for each of your application instances. One of the features of Diego (new way of doing things) versus DEAs (original way) is that you have the ability to [SSH](https://en.wikipedia.org/wiki/Secure_Shell) into the containers for debugging purposes.

### How?
1. `cf ssh spring-music`
1. `ls` around the directory tree
1. Use the `ps aux` command to see what processes are running.
1. Run `env` to view environment variables. You'll see there are additional environment variables that the cf CLI doesn't print, but that are available to your application. The full [list of variables can be viewed here](https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html).
1. `exit`, then SSH back into a specific instance of your app, using the `-i app-instance-index` flag. View the [CLI SSH flags](http://cli.cloudfoundry.org/en-US/cf/ssh.html) to see what else is possible.

**TRIVIA:** did you notice that you're SSH-ed in as the `vcap` user? VCAP stands for VMware's Cloud Application Platform, an old name for Cloud Foundry. Catchy, right?

### Resources
[Differences Between DEA and Diego Architectures](https://docs.cloudfoundry.org/concepts/diego/dea-vs-diego.html)
[Unix/Linux StackExchange: What does aux mean in `ps aux`?](http://unix.stackexchange.com/questions/106847/what-does-aux-mean-in-ps-aux)
L: app-dev, cloud foundry
---
Scale your app with the CLI
### What?
Your application runs in a container hosted on a Diego Cell. A Cloud Foundry deployment could have many cells that span multiple Availability Zones. Diego will automatically balance the applications you deploy across the defined AZs. Then when an AZ goes down (along with your application), Diego will start a new instance of your application in a healthy cell in a different AZ. Depending on demand, you may want to scale your application horizontally (more instances) and/or vertically (more disk & memory).

You already have two instances of spring-music, but lets bump that up to five.

### How?
1. `cf scale -m 512M -i 5 spring-music`
1. `cf app spring-music`

### Expected Result
`cf app spring-music` should show five instances and the disk and memory they are each allotted.
`cf env spring-music` should show my new disk and memory limits listed under VCAP_APPLICATION.

### Resources
[Scaling apps on CF](https://docs.run.pivotal.io/devguide/deploy-apps/cf-scale.html)
L: app-dev, cloud foundry
---
Kill a specific instance of an application
### What?
Sometimes it's clear a particular instance of your app is having a problem, but it isn't being identified and culled by the HealthCheck. This is a good way to take it out yourself.

### How?
Using `cf curl`, kill a specific instance of spring-music.

### Expected Result
Run `watch cf app spring-music`. You should see your app recovering.

### Resources
[VCAP environment variables docs](https://docs.run.pivotal.io/devguide/deploy-apps/environment-variable.html)
L: app-dev, cloud foundry
---
Add an additional route to the application
### What?
All network requests are managed by the [gorouter](https://github.com/cloudfoundry/gorouter).  Your application needs a route mapped to itself so that the gorouter will redirect traffic to it.

The route your app currently has (e.g.`http://spring-music.<ip>.xip.io/` or `https://spring-music.local.pcfdev.io`) consists of the IP of your gorouter coupled with a domain name that provides wildcard DNS for any IP address ([xip.io](http://xip.io/)) *or* a normal domain like pcfdev.io. It also has a host, `spring-music`.

Domains are set up by administrators/operators. This requires a DNS record to be configured outside of the CF deployment. The record must resolve to the gorouter IP or to a load balancer which forwards requests to multiple gorouters.

### How?
1. View global domains 
`cf domains` and routes in your space `cf routes`
1. Create a new route 
`cf create-route week <ip>.xip.io --hostname fall-music`
1. Visit `http://fall-music.<ip>.xip.io`
1. Map the route to the spring-music app 
`cf map-route spring-music local.pcfdev.io -n fall-music`
1. Visit `http://fall-music.<ip>.xip.io` again

### Expected Result
`cf domains` lists domains for the organization and indicates which ones are TCP vs HTTP.  You will additionally see `shared` domains which are created by the administrator and available to all organizations. `cf routes` will list all the routes in the targeted space (onboarding). You should see a default route mapped to your spring-music app.

When the new route was not mapped to the spring-music app, the router should have returned HTTP Status Code 404 Not Found. It will behave normally when the mapping is made.

### Additional notes
The combination of route and domain names are unique. Even though you may not see a route in your space, that doesn't mean it's not taken by another application in a different org or space. 

### Resources
[CF Routes and Domains](https://docs.cloudfoundry.org/devguide/deploy-apps/routes-domains.html)
[Basic Linux Networking reference](http://www.penguintutor.com/linux/basic-network-reference)
L: app-dev, cloud foundry
---
HTTP trace a CLI command
### What?
Behind the scenes the command line depends on several components in Cloud Foundry. If a cf CLI command fails or produces unexpected results, re-run it with HTTP tracing enabled to view raw requests and responses between the cf CLI and the other components. The majority of those calls will be to the Cloud Controller REST API, but for logging the CLI hits the Loggregator.

### How?
Enable HTTP tracing with the CF_TRACE environment variable (`CF_TRACE=true`) or the -v flag (`-v`).

Try this now with `cf app`.  Just run `cf app spring-music -v`.

### Expected Result
You should see each of the requests and responses that resulted in `cf app` delivering information about your app. Now give it a shot with other cf CLI commands!

### Resources
[Trace Cloud Controller REST API Calls](https://docs.cloudfoundry.org/devguide/deploy-apps/troubleshoot-app-health.html#trace)
L: app-dev, cloud foundry
---
[RELEASE] App Development ⇧
